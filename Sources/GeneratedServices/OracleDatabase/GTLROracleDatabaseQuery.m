// NOTE: This file was generated by the ServiceGenerator.

// ----------------------------------------------------------------------------
// API:
//   Oracle Database@Google Cloud API (oracledatabase/v1)
// Description:
//   The Oracle Database@Google Cloud API provides a set of APIs to manage
//   Oracle database services, such as Exadata and Autonomous Databases.
// Documentation:
//   https://cloud.google.com/oracle/database/docs

#import <GoogleAPIClientForREST/GTLROracleDatabaseQuery.h>

@implementation GTLROracleDatabaseQuery

@dynamic fields;

@end

@implementation GTLROracleDatabaseQuery_ProjectsLocationsAutonomousDatabaseBackupsList

@dynamic filter, pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/autonomousDatabaseBackups";
  GTLROracleDatabaseQuery_ProjectsLocationsAutonomousDatabaseBackupsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLROracleDatabase_ListAutonomousDatabaseBackupsResponse class];
  query.loggingName = @"oracledatabase.projects.locations.autonomousDatabaseBackups.list";
  return query;
}

@end

@implementation GTLROracleDatabaseQuery_ProjectsLocationsAutonomousDatabaseCharacterSetsList

@dynamic filter, pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/autonomousDatabaseCharacterSets";
  GTLROracleDatabaseQuery_ProjectsLocationsAutonomousDatabaseCharacterSetsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLROracleDatabase_ListAutonomousDatabaseCharacterSetsResponse class];
  query.loggingName = @"oracledatabase.projects.locations.autonomousDatabaseCharacterSets.list";
  return query;
}

@end

@implementation GTLROracleDatabaseQuery_ProjectsLocationsAutonomousDatabasesCreate

@dynamic autonomousDatabaseId, parent, requestId;

+ (instancetype)queryWithObject:(GTLROracleDatabase_AutonomousDatabase *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/autonomousDatabases";
  GTLROracleDatabaseQuery_ProjectsLocationsAutonomousDatabasesCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLROracleDatabase_Operation class];
  query.loggingName = @"oracledatabase.projects.locations.autonomousDatabases.create";
  return query;
}

@end

@implementation GTLROracleDatabaseQuery_ProjectsLocationsAutonomousDatabasesDelete

@dynamic name, requestId;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLROracleDatabaseQuery_ProjectsLocationsAutonomousDatabasesDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLROracleDatabase_Operation class];
  query.loggingName = @"oracledatabase.projects.locations.autonomousDatabases.delete";
  return query;
}

@end

@implementation GTLROracleDatabaseQuery_ProjectsLocationsAutonomousDatabasesFailover

@dynamic name;

+ (instancetype)queryWithObject:(GTLROracleDatabase_FailoverAutonomousDatabaseRequest *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}:failover";
  GTLROracleDatabaseQuery_ProjectsLocationsAutonomousDatabasesFailover *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLROracleDatabase_Operation class];
  query.loggingName = @"oracledatabase.projects.locations.autonomousDatabases.failover";
  return query;
}

@end

@implementation GTLROracleDatabaseQuery_ProjectsLocationsAutonomousDatabasesGenerateWallet

@dynamic name;

+ (instancetype)queryWithObject:(GTLROracleDatabase_GenerateAutonomousDatabaseWalletRequest *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}:generateWallet";
  GTLROracleDatabaseQuery_ProjectsLocationsAutonomousDatabasesGenerateWallet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLROracleDatabase_GenerateAutonomousDatabaseWalletResponse class];
  query.loggingName = @"oracledatabase.projects.locations.autonomousDatabases.generateWallet";
  return query;
}

@end

@implementation GTLROracleDatabaseQuery_ProjectsLocationsAutonomousDatabasesGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLROracleDatabaseQuery_ProjectsLocationsAutonomousDatabasesGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLROracleDatabase_AutonomousDatabase class];
  query.loggingName = @"oracledatabase.projects.locations.autonomousDatabases.get";
  return query;
}

@end

@implementation GTLROracleDatabaseQuery_ProjectsLocationsAutonomousDatabasesList

@dynamic filter, orderBy, pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/autonomousDatabases";
  GTLROracleDatabaseQuery_ProjectsLocationsAutonomousDatabasesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLROracleDatabase_ListAutonomousDatabasesResponse class];
  query.loggingName = @"oracledatabase.projects.locations.autonomousDatabases.list";
  return query;
}

@end

@implementation GTLROracleDatabaseQuery_ProjectsLocationsAutonomousDatabasesPatch

@dynamic name, requestId, updateMask;

+ (instancetype)queryWithObject:(GTLROracleDatabase_AutonomousDatabase *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLROracleDatabaseQuery_ProjectsLocationsAutonomousDatabasesPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLROracleDatabase_Operation class];
  query.loggingName = @"oracledatabase.projects.locations.autonomousDatabases.patch";
  return query;
}

@end

@implementation GTLROracleDatabaseQuery_ProjectsLocationsAutonomousDatabasesRestart

@dynamic name;

+ (instancetype)queryWithObject:(GTLROracleDatabase_RestartAutonomousDatabaseRequest *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}:restart";
  GTLROracleDatabaseQuery_ProjectsLocationsAutonomousDatabasesRestart *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLROracleDatabase_Operation class];
  query.loggingName = @"oracledatabase.projects.locations.autonomousDatabases.restart";
  return query;
}

@end

@implementation GTLROracleDatabaseQuery_ProjectsLocationsAutonomousDatabasesRestore

@dynamic name;

+ (instancetype)queryWithObject:(GTLROracleDatabase_RestoreAutonomousDatabaseRequest *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}:restore";
  GTLROracleDatabaseQuery_ProjectsLocationsAutonomousDatabasesRestore *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLROracleDatabase_Operation class];
  query.loggingName = @"oracledatabase.projects.locations.autonomousDatabases.restore";
  return query;
}

@end

@implementation GTLROracleDatabaseQuery_ProjectsLocationsAutonomousDatabasesStart

@dynamic name;

+ (instancetype)queryWithObject:(GTLROracleDatabase_StartAutonomousDatabaseRequest *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}:start";
  GTLROracleDatabaseQuery_ProjectsLocationsAutonomousDatabasesStart *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLROracleDatabase_Operation class];
  query.loggingName = @"oracledatabase.projects.locations.autonomousDatabases.start";
  return query;
}

@end

@implementation GTLROracleDatabaseQuery_ProjectsLocationsAutonomousDatabasesStop

@dynamic name;

+ (instancetype)queryWithObject:(GTLROracleDatabase_StopAutonomousDatabaseRequest *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}:stop";
  GTLROracleDatabaseQuery_ProjectsLocationsAutonomousDatabasesStop *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLROracleDatabase_Operation class];
  query.loggingName = @"oracledatabase.projects.locations.autonomousDatabases.stop";
  return query;
}

@end

@implementation GTLROracleDatabaseQuery_ProjectsLocationsAutonomousDatabasesSwitchover

@dynamic name;

+ (instancetype)queryWithObject:(GTLROracleDatabase_SwitchoverAutonomousDatabaseRequest *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}:switchover";
  GTLROracleDatabaseQuery_ProjectsLocationsAutonomousDatabasesSwitchover *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLROracleDatabase_Operation class];
  query.loggingName = @"oracledatabase.projects.locations.autonomousDatabases.switchover";
  return query;
}

@end

@implementation GTLROracleDatabaseQuery_ProjectsLocationsAutonomousDbVersionsList

@dynamic pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/autonomousDbVersions";
  GTLROracleDatabaseQuery_ProjectsLocationsAutonomousDbVersionsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLROracleDatabase_ListAutonomousDbVersionsResponse class];
  query.loggingName = @"oracledatabase.projects.locations.autonomousDbVersions.list";
  return query;
}

@end

@implementation GTLROracleDatabaseQuery_ProjectsLocationsCloudExadataInfrastructuresCreate

@dynamic cloudExadataInfrastructureId, parent, requestId;

+ (instancetype)queryWithObject:(GTLROracleDatabase_CloudExadataInfrastructure *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/cloudExadataInfrastructures";
  GTLROracleDatabaseQuery_ProjectsLocationsCloudExadataInfrastructuresCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLROracleDatabase_Operation class];
  query.loggingName = @"oracledatabase.projects.locations.cloudExadataInfrastructures.create";
  return query;
}

@end

@implementation GTLROracleDatabaseQuery_ProjectsLocationsCloudExadataInfrastructuresDbServersList

@dynamic pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/dbServers";
  GTLROracleDatabaseQuery_ProjectsLocationsCloudExadataInfrastructuresDbServersList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLROracleDatabase_ListDbServersResponse class];
  query.loggingName = @"oracledatabase.projects.locations.cloudExadataInfrastructures.dbServers.list";
  return query;
}

@end

@implementation GTLROracleDatabaseQuery_ProjectsLocationsCloudExadataInfrastructuresDelete

@dynamic force, name, requestId;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLROracleDatabaseQuery_ProjectsLocationsCloudExadataInfrastructuresDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLROracleDatabase_Operation class];
  query.loggingName = @"oracledatabase.projects.locations.cloudExadataInfrastructures.delete";
  return query;
}

@end

@implementation GTLROracleDatabaseQuery_ProjectsLocationsCloudExadataInfrastructuresGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLROracleDatabaseQuery_ProjectsLocationsCloudExadataInfrastructuresGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLROracleDatabase_CloudExadataInfrastructure class];
  query.loggingName = @"oracledatabase.projects.locations.cloudExadataInfrastructures.get";
  return query;
}

@end

@implementation GTLROracleDatabaseQuery_ProjectsLocationsCloudExadataInfrastructuresList

@dynamic filter, orderBy, pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/cloudExadataInfrastructures";
  GTLROracleDatabaseQuery_ProjectsLocationsCloudExadataInfrastructuresList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLROracleDatabase_ListCloudExadataInfrastructuresResponse class];
  query.loggingName = @"oracledatabase.projects.locations.cloudExadataInfrastructures.list";
  return query;
}

@end

@implementation GTLROracleDatabaseQuery_ProjectsLocationsCloudVmClustersCreate

@dynamic cloudVmClusterId, parent, requestId;

+ (instancetype)queryWithObject:(GTLROracleDatabase_CloudVmCluster *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/cloudVmClusters";
  GTLROracleDatabaseQuery_ProjectsLocationsCloudVmClustersCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLROracleDatabase_Operation class];
  query.loggingName = @"oracledatabase.projects.locations.cloudVmClusters.create";
  return query;
}

@end

@implementation GTLROracleDatabaseQuery_ProjectsLocationsCloudVmClustersDbNodesList

@dynamic pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/dbNodes";
  GTLROracleDatabaseQuery_ProjectsLocationsCloudVmClustersDbNodesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLROracleDatabase_ListDbNodesResponse class];
  query.loggingName = @"oracledatabase.projects.locations.cloudVmClusters.dbNodes.list";
  return query;
}

@end

@implementation GTLROracleDatabaseQuery_ProjectsLocationsCloudVmClustersDelete

@dynamic force, name, requestId;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLROracleDatabaseQuery_ProjectsLocationsCloudVmClustersDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLROracleDatabase_Operation class];
  query.loggingName = @"oracledatabase.projects.locations.cloudVmClusters.delete";
  return query;
}

@end

@implementation GTLROracleDatabaseQuery_ProjectsLocationsCloudVmClustersGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLROracleDatabaseQuery_ProjectsLocationsCloudVmClustersGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLROracleDatabase_CloudVmCluster class];
  query.loggingName = @"oracledatabase.projects.locations.cloudVmClusters.get";
  return query;
}

@end

@implementation GTLROracleDatabaseQuery_ProjectsLocationsCloudVmClustersList

@dynamic filter, pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/cloudVmClusters";
  GTLROracleDatabaseQuery_ProjectsLocationsCloudVmClustersList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLROracleDatabase_ListCloudVmClustersResponse class];
  query.loggingName = @"oracledatabase.projects.locations.cloudVmClusters.list";
  return query;
}

@end

@implementation GTLROracleDatabaseQuery_ProjectsLocationsDatabaseCharacterSetsList

@dynamic filter, pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/databaseCharacterSets";
  GTLROracleDatabaseQuery_ProjectsLocationsDatabaseCharacterSetsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLROracleDatabase_ListDatabaseCharacterSetsResponse class];
  query.loggingName = @"oracledatabase.projects.locations.databaseCharacterSets.list";
  return query;
}

@end

@implementation GTLROracleDatabaseQuery_ProjectsLocationsDatabasesGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLROracleDatabaseQuery_ProjectsLocationsDatabasesGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLROracleDatabase_Database class];
  query.loggingName = @"oracledatabase.projects.locations.databases.get";
  return query;
}

@end

@implementation GTLROracleDatabaseQuery_ProjectsLocationsDatabasesList

@dynamic filter, pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/databases";
  GTLROracleDatabaseQuery_ProjectsLocationsDatabasesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLROracleDatabase_ListDatabasesResponse class];
  query.loggingName = @"oracledatabase.projects.locations.databases.list";
  return query;
}

@end

@implementation GTLROracleDatabaseQuery_ProjectsLocationsDbSystemInitialStorageSizesList

@dynamic pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/dbSystemInitialStorageSizes";
  GTLROracleDatabaseQuery_ProjectsLocationsDbSystemInitialStorageSizesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLROracleDatabase_ListDbSystemInitialStorageSizesResponse class];
  query.loggingName = @"oracledatabase.projects.locations.dbSystemInitialStorageSizes.list";
  return query;
}

@end

@implementation GTLROracleDatabaseQuery_ProjectsLocationsDbSystemsCreate

@dynamic dbSystemId, parent, requestId;

+ (instancetype)queryWithObject:(GTLROracleDatabase_DbSystem *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/dbSystems";
  GTLROracleDatabaseQuery_ProjectsLocationsDbSystemsCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLROracleDatabase_Operation class];
  query.loggingName = @"oracledatabase.projects.locations.dbSystems.create";
  return query;
}

@end

@implementation GTLROracleDatabaseQuery_ProjectsLocationsDbSystemsDelete

@dynamic name, requestId;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLROracleDatabaseQuery_ProjectsLocationsDbSystemsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLROracleDatabase_Operation class];
  query.loggingName = @"oracledatabase.projects.locations.dbSystems.delete";
  return query;
}

@end

@implementation GTLROracleDatabaseQuery_ProjectsLocationsDbSystemsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLROracleDatabaseQuery_ProjectsLocationsDbSystemsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLROracleDatabase_DbSystem class];
  query.loggingName = @"oracledatabase.projects.locations.dbSystems.get";
  return query;
}

@end

@implementation GTLROracleDatabaseQuery_ProjectsLocationsDbSystemShapesList

@dynamic filter, pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/dbSystemShapes";
  GTLROracleDatabaseQuery_ProjectsLocationsDbSystemShapesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLROracleDatabase_ListDbSystemShapesResponse class];
  query.loggingName = @"oracledatabase.projects.locations.dbSystemShapes.list";
  return query;
}

@end

@implementation GTLROracleDatabaseQuery_ProjectsLocationsDbSystemsList

@dynamic filter, orderBy, pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/dbSystems";
  GTLROracleDatabaseQuery_ProjectsLocationsDbSystemsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLROracleDatabase_ListDbSystemsResponse class];
  query.loggingName = @"oracledatabase.projects.locations.dbSystems.list";
  return query;
}

@end

@implementation GTLROracleDatabaseQuery_ProjectsLocationsDbVersionsList

@dynamic filter, pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/dbVersions";
  GTLROracleDatabaseQuery_ProjectsLocationsDbVersionsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLROracleDatabase_ListDbVersionsResponse class];
  query.loggingName = @"oracledatabase.projects.locations.dbVersions.list";
  return query;
}

@end

@implementation GTLROracleDatabaseQuery_ProjectsLocationsEntitlementsList

@dynamic pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/entitlements";
  GTLROracleDatabaseQuery_ProjectsLocationsEntitlementsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLROracleDatabase_ListEntitlementsResponse class];
  query.loggingName = @"oracledatabase.projects.locations.entitlements.list";
  return query;
}

@end

@implementation GTLROracleDatabaseQuery_ProjectsLocationsExadbVmClustersCreate

@dynamic exadbVmClusterId, parent, requestId;

+ (instancetype)queryWithObject:(GTLROracleDatabase_ExadbVmCluster *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/exadbVmClusters";
  GTLROracleDatabaseQuery_ProjectsLocationsExadbVmClustersCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLROracleDatabase_Operation class];
  query.loggingName = @"oracledatabase.projects.locations.exadbVmClusters.create";
  return query;
}

@end

@implementation GTLROracleDatabaseQuery_ProjectsLocationsExadbVmClustersDelete

@dynamic name, requestId;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLROracleDatabaseQuery_ProjectsLocationsExadbVmClustersDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLROracleDatabase_Operation class];
  query.loggingName = @"oracledatabase.projects.locations.exadbVmClusters.delete";
  return query;
}

@end

@implementation GTLROracleDatabaseQuery_ProjectsLocationsExadbVmClustersGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLROracleDatabaseQuery_ProjectsLocationsExadbVmClustersGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLROracleDatabase_ExadbVmCluster class];
  query.loggingName = @"oracledatabase.projects.locations.exadbVmClusters.get";
  return query;
}

@end

@implementation GTLROracleDatabaseQuery_ProjectsLocationsExadbVmClustersList

@dynamic filter, orderBy, pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/exadbVmClusters";
  GTLROracleDatabaseQuery_ProjectsLocationsExadbVmClustersList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLROracleDatabase_ListExadbVmClustersResponse class];
  query.loggingName = @"oracledatabase.projects.locations.exadbVmClusters.list";
  return query;
}

@end

@implementation GTLROracleDatabaseQuery_ProjectsLocationsExadbVmClustersPatch

@dynamic name, requestId, updateMask;

+ (instancetype)queryWithObject:(GTLROracleDatabase_ExadbVmCluster *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLROracleDatabaseQuery_ProjectsLocationsExadbVmClustersPatch *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"PATCH"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLROracleDatabase_Operation class];
  query.loggingName = @"oracledatabase.projects.locations.exadbVmClusters.patch";
  return query;
}

@end

@implementation GTLROracleDatabaseQuery_ProjectsLocationsExadbVmClustersRemoveVirtualMachine

@dynamic name;

+ (instancetype)queryWithObject:(GTLROracleDatabase_RemoveVirtualMachineExadbVmClusterRequest *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}:removeVirtualMachine";
  GTLROracleDatabaseQuery_ProjectsLocationsExadbVmClustersRemoveVirtualMachine *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLROracleDatabase_Operation class];
  query.loggingName = @"oracledatabase.projects.locations.exadbVmClusters.removeVirtualMachine";
  return query;
}

@end

@implementation GTLROracleDatabaseQuery_ProjectsLocationsExascaleDbStorageVaultsCreate

@dynamic exascaleDbStorageVaultId, parent, requestId;

+ (instancetype)queryWithObject:(GTLROracleDatabase_ExascaleDbStorageVault *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/exascaleDbStorageVaults";
  GTLROracleDatabaseQuery_ProjectsLocationsExascaleDbStorageVaultsCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLROracleDatabase_Operation class];
  query.loggingName = @"oracledatabase.projects.locations.exascaleDbStorageVaults.create";
  return query;
}

@end

@implementation GTLROracleDatabaseQuery_ProjectsLocationsExascaleDbStorageVaultsDelete

@dynamic name, requestId;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLROracleDatabaseQuery_ProjectsLocationsExascaleDbStorageVaultsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLROracleDatabase_Operation class];
  query.loggingName = @"oracledatabase.projects.locations.exascaleDbStorageVaults.delete";
  return query;
}

@end

@implementation GTLROracleDatabaseQuery_ProjectsLocationsExascaleDbStorageVaultsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLROracleDatabaseQuery_ProjectsLocationsExascaleDbStorageVaultsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLROracleDatabase_ExascaleDbStorageVault class];
  query.loggingName = @"oracledatabase.projects.locations.exascaleDbStorageVaults.get";
  return query;
}

@end

@implementation GTLROracleDatabaseQuery_ProjectsLocationsExascaleDbStorageVaultsList

@dynamic filter, orderBy, pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/exascaleDbStorageVaults";
  GTLROracleDatabaseQuery_ProjectsLocationsExascaleDbStorageVaultsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLROracleDatabase_ListExascaleDbStorageVaultsResponse class];
  query.loggingName = @"oracledatabase.projects.locations.exascaleDbStorageVaults.list";
  return query;
}

@end

@implementation GTLROracleDatabaseQuery_ProjectsLocationsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLROracleDatabaseQuery_ProjectsLocationsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLROracleDatabase_Location class];
  query.loggingName = @"oracledatabase.projects.locations.get";
  return query;
}

@end

@implementation GTLROracleDatabaseQuery_ProjectsLocationsGiVersionsList

@dynamic filter, pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/giVersions";
  GTLROracleDatabaseQuery_ProjectsLocationsGiVersionsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLROracleDatabase_ListGiVersionsResponse class];
  query.loggingName = @"oracledatabase.projects.locations.giVersions.list";
  return query;
}

@end

@implementation GTLROracleDatabaseQuery_ProjectsLocationsGiVersionsMinorVersionsList

@dynamic filter, pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/minorVersions";
  GTLROracleDatabaseQuery_ProjectsLocationsGiVersionsMinorVersionsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLROracleDatabase_ListMinorVersionsResponse class];
  query.loggingName = @"oracledatabase.projects.locations.giVersions.minorVersions.list";
  return query;
}

@end

@implementation GTLROracleDatabaseQuery_ProjectsLocationsList

@dynamic extraLocationTypes, filter, name, pageSize, pageToken;

+ (NSDictionary<NSString *, Class> *)arrayPropertyToClassMap {
  NSDictionary<NSString *, Class> *map = @{
    @"extraLocationTypes" : [NSString class]
  };
  return map;
}

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}/locations";
  GTLROracleDatabaseQuery_ProjectsLocationsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLROracleDatabase_ListLocationsResponse class];
  query.loggingName = @"oracledatabase.projects.locations.list";
  return query;
}

@end

@implementation GTLROracleDatabaseQuery_ProjectsLocationsOdbNetworksCreate

@dynamic odbNetworkId, parent, requestId;

+ (instancetype)queryWithObject:(GTLROracleDatabase_OdbNetwork *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/odbNetworks";
  GTLROracleDatabaseQuery_ProjectsLocationsOdbNetworksCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLROracleDatabase_Operation class];
  query.loggingName = @"oracledatabase.projects.locations.odbNetworks.create";
  return query;
}

@end

@implementation GTLROracleDatabaseQuery_ProjectsLocationsOdbNetworksDelete

@dynamic name, requestId;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLROracleDatabaseQuery_ProjectsLocationsOdbNetworksDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLROracleDatabase_Operation class];
  query.loggingName = @"oracledatabase.projects.locations.odbNetworks.delete";
  return query;
}

@end

@implementation GTLROracleDatabaseQuery_ProjectsLocationsOdbNetworksGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLROracleDatabaseQuery_ProjectsLocationsOdbNetworksGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLROracleDatabase_OdbNetwork class];
  query.loggingName = @"oracledatabase.projects.locations.odbNetworks.get";
  return query;
}

@end

@implementation GTLROracleDatabaseQuery_ProjectsLocationsOdbNetworksList

@dynamic filter, orderBy, pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/odbNetworks";
  GTLROracleDatabaseQuery_ProjectsLocationsOdbNetworksList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLROracleDatabase_ListOdbNetworksResponse class];
  query.loggingName = @"oracledatabase.projects.locations.odbNetworks.list";
  return query;
}

@end

@implementation GTLROracleDatabaseQuery_ProjectsLocationsOdbNetworksOdbSubnetsCreate

@dynamic odbSubnetId, parent, requestId;

+ (instancetype)queryWithObject:(GTLROracleDatabase_OdbSubnet *)object
                         parent:(NSString *)parent {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/odbSubnets";
  GTLROracleDatabaseQuery_ProjectsLocationsOdbNetworksOdbSubnetsCreate *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.parent = parent;
  query.expectedObjectClass = [GTLROracleDatabase_Operation class];
  query.loggingName = @"oracledatabase.projects.locations.odbNetworks.odbSubnets.create";
  return query;
}

@end

@implementation GTLROracleDatabaseQuery_ProjectsLocationsOdbNetworksOdbSubnetsDelete

@dynamic name, requestId;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLROracleDatabaseQuery_ProjectsLocationsOdbNetworksOdbSubnetsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLROracleDatabase_Operation class];
  query.loggingName = @"oracledatabase.projects.locations.odbNetworks.odbSubnets.delete";
  return query;
}

@end

@implementation GTLROracleDatabaseQuery_ProjectsLocationsOdbNetworksOdbSubnetsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLROracleDatabaseQuery_ProjectsLocationsOdbNetworksOdbSubnetsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLROracleDatabase_OdbSubnet class];
  query.loggingName = @"oracledatabase.projects.locations.odbNetworks.odbSubnets.get";
  return query;
}

@end

@implementation GTLROracleDatabaseQuery_ProjectsLocationsOdbNetworksOdbSubnetsList

@dynamic filter, orderBy, pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/odbSubnets";
  GTLROracleDatabaseQuery_ProjectsLocationsOdbNetworksOdbSubnetsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLROracleDatabase_ListOdbSubnetsResponse class];
  query.loggingName = @"oracledatabase.projects.locations.odbNetworks.odbSubnets.list";
  return query;
}

@end

@implementation GTLROracleDatabaseQuery_ProjectsLocationsOperationsCancel

@dynamic name;

+ (instancetype)queryWithObject:(GTLROracleDatabase_CancelOperationRequest *)object
                           name:(NSString *)name {
  if (object == nil) {
#if defined(DEBUG) && DEBUG
    NSAssert(object != nil, @"Got a nil object");
#endif
    return nil;
  }
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}:cancel";
  GTLROracleDatabaseQuery_ProjectsLocationsOperationsCancel *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"POST"
                       pathParameterNames:pathParams];
  query.bodyObject = object;
  query.name = name;
  query.expectedObjectClass = [GTLROracleDatabase_Empty class];
  query.loggingName = @"oracledatabase.projects.locations.operations.cancel";
  return query;
}

@end

@implementation GTLROracleDatabaseQuery_ProjectsLocationsOperationsDelete

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLROracleDatabaseQuery_ProjectsLocationsOperationsDelete *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:@"DELETE"
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLROracleDatabase_Empty class];
  query.loggingName = @"oracledatabase.projects.locations.operations.delete";
  return query;
}

@end

@implementation GTLROracleDatabaseQuery_ProjectsLocationsOperationsGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLROracleDatabaseQuery_ProjectsLocationsOperationsGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLROracleDatabase_Operation class];
  query.loggingName = @"oracledatabase.projects.locations.operations.get";
  return query;
}

@end

@implementation GTLROracleDatabaseQuery_ProjectsLocationsOperationsList

@dynamic filter, name, pageSize, pageToken, returnPartialSuccess;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}/operations";
  GTLROracleDatabaseQuery_ProjectsLocationsOperationsList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLROracleDatabase_ListOperationsResponse class];
  query.loggingName = @"oracledatabase.projects.locations.operations.list";
  return query;
}

@end

@implementation GTLROracleDatabaseQuery_ProjectsLocationsPluggableDatabasesGet

@dynamic name;

+ (instancetype)queryWithName:(NSString *)name {
  NSArray *pathParams = @[ @"name" ];
  NSString *pathURITemplate = @"v1/{+name}";
  GTLROracleDatabaseQuery_ProjectsLocationsPluggableDatabasesGet *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.name = name;
  query.expectedObjectClass = [GTLROracleDatabase_PluggableDatabase class];
  query.loggingName = @"oracledatabase.projects.locations.pluggableDatabases.get";
  return query;
}

@end

@implementation GTLROracleDatabaseQuery_ProjectsLocationsPluggableDatabasesList

@dynamic filter, pageSize, pageToken, parent;

+ (instancetype)queryWithParent:(NSString *)parent {
  NSArray *pathParams = @[ @"parent" ];
  NSString *pathURITemplate = @"v1/{+parent}/pluggableDatabases";
  GTLROracleDatabaseQuery_ProjectsLocationsPluggableDatabasesList *query =
    [[self alloc] initWithPathURITemplate:pathURITemplate
                               HTTPMethod:nil
                       pathParameterNames:pathParams];
  query.parent = parent;
  query.expectedObjectClass = [GTLROracleDatabase_ListPluggableDatabasesResponse class];
  query.loggingName = @"oracledatabase.projects.locations.pluggableDatabases.list";
  return query;
}

@end
